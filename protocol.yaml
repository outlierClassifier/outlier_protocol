openapi: 3.1.0
info:
  title: Node Protocol - Health Endpoint
  version: 0.1.0
paths:
  /health:
    get:
      summary: Node health check
      description: |
        The control server calls this endpoint on every registered node.  
        A healthy node returns **200 OK** with a `HealthCheckResponse` body.
      responses:
        '200':
          description: Node is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
              examples:
                healthy:
                  summary: Sample healthy response
                  value:
                    name: "svm"
                    uptime: 12345.67
                    lastTraining: "2025-06-12T08:15:30Z"
        '503':
          description: Node is unavailable
  /train:
    post:
      summary: Start a training session
      description: |
        The orchestrator sends the total number of discharges and the
        maximum time (in seconds) the node has to answer.  
        The node replies with the number of discharges it plans to
        receive (**must be equal to `totalDischarges`**).  If the node cannot
        accept the job it should reply `503 Service Unavailable`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTrainingRequest'
      responses:
        '200':
          description: Node accepted the session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartTrainingResponse'
              examples:
                accepted:
                  value:
                    expectedDischarges: 8
        '503':
          description: Node is busy or cannot train now
  /train/{ordinal}:
    post:
      summary: Push a discharge to the node
      description: |
        The orchestrator sends one discharge at a time.  
        `ordinal` is **1-based**; the final push uses
        `ordinal = totalDischarges`.  
        After receiving and persisting the discharge, the node responds
        with an acknowledgement.  When the node confirms the last
        discharge, it immediately starts its local training process.
      parameters:
        - name: ordinal
          in: path
          required: true
          description: Sequential index of this discharge (1 â€¦ N).
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discharge'
      responses:
        '200':
          description: Discharge stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DischargeAck'
              examples:
                ack:
                  value:
                    ordinal: 1
                    totalDischarges: 8
  /predict:
    post:
      summary: Run a disruption prediction
      description: |
        The orchestrator sends a single discharge.  
        The node performs the calculation and answers when it finishes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discharge'
      responses:
        '200':
          description: Prediction completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionResponse'
              examples:
                sample:
                  value:
                    prediction: 1
                    confidence: 0.93
                    executionTimeMs: 420.5
                    model: "svm"
        '503':
          description: Node cannot run prediction now
webhooks:
  trainingCompleted:
    post:
      summary: Training finished callback
      description: |
        Triggered once the node completes its local training job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingResponse'
      responses:
        '200':
          description: Acknowledged
components:
  schemas:
    HealthCheckResponse:
      type: object
      required:
        - name
        - uptime
        - lastTraining
      properties:
        name:
          type: string
          description: Model or node identifier.
        uptime:
          type: number
          format: double
          description: Seconds the process has been running.
        lastTraining:
          type: string
          format: date-time
          description: ISO-8601 timestamp of the most recent training run.
    StartTrainingRequest:
      type: object
      required:
        - totalDischarges
        - timeoutSeconds
      properties:
        totalDischarges:
          type: integer
          minimum: 1
          description: Total number of discharges that will be sent.
        timeoutSeconds:
          type: integer
          minimum: 1
          description: |
            Maximum time (in seconds) the orchestrator will wait for
            every node to answer before proceeding.
    StartTrainingResponse:
      type: object
      required:
        - expectedDischarges
      properties:
        expectedDischarges:
          type: integer
          minimum: 0
          description: |
            Number of discharges the node expects to receive in this
            session.  Must be equal to `totalDischarges`
            (inclusive).
    Discharge:
      type: object
      required:
        - id
        - signals
        - times
        - length
      properties:
        id:
          type: string
          description: Unique identifier of the discharge.
        signals:
          $ref: '#/components/schemas/Signal'
        times:
          type: array
          minItems: 1
          items:
            type: number
            format: double
          description: Time stamps (seconds) aligned with `signals.values`.
        length:
          type: integer
          minimum: 1
          description: Number of samples contained in each `signals.values`.
    Signal:
      type: object
      required:
        - filename
        - values
      properties:
        filename:
          type: string
          description: Source file that stores or generated this signal.
        values:
          type: array
          minItems: 1
          items:
            type: number
            format: double
          description: Numerical samples of the signal.
    DischargeAck:
      type: object
      required:
        - ordinal
        - totalDischarges
      properties:
        ordinal:
          type: integer
          minimum: 1
          description: Ordinal number just acknowledged.
        totalDischarges:
          type: integer
          minimum: 1
          description: Total discharges expected for the session.
    TrainingResponse:
      type: object
      required:
        - status
        - message
        - trainingId
        - metrics
        - executionTimeMs
      properties:
        status:
          type: string
          description: Final result of the training (e.g. "SUCCESS", "FAILED").
        message:
          type: string
          description: Human-readable detail or error message.
        trainingId:
          type: string
          description: Unique identifier for this training run.
        metrics:
          $ref: '#/components/schemas/TrainingMetrics'
        executionTimeMs:
          type: number
          format: double
          description: Total wall-clock time in milliseconds.
    TrainingMetrics:
      type: object
      required:
        - accuracy
        - loss
        - f1Score
      properties:
        accuracy:
          type: number
          format: double
          description: Accuracy (0 - 1).
        loss:
          type: number
          format: double
          description: Loss on the validation set.
        f1Score:
          type: number
          format: double
          description: F1 score (0 - 1).
    PredictionResponse:
      type: object
      required:
        - prediction
        - confidence
        - executionTimeMs
        - model
      properties:
        prediction:
          type: string
          enum: [Normal, Anomaly]
          description: |
            Discharge classification returned by the model:
            *Normal* = non-disruptive, *Anomaly* = disruptive.
        confidence:
          type: number
          format: double
          description: Model-reported confidence (0 - 1).
        executionTimeMs:
          type: number
          format: double
          description: Wall-clock time used to compute the prediction.
        model:
          type: string
          description: Identifier of the model that generated the result.